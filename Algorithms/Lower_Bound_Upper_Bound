//55566677
//lowerbound(6) >= v.begin+3
//upperbound(6) >  v.begin+6
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
    vector<int> v={5,6,7,7,6,5,5,6};
    sort(v.begin(),v.end());
    // 5 5 5 6  6 6 7 7 
    vector<int>::iterator lower,upper;
    lower=lower_bound(v.begin(),v.end(),6);
    upper=upper_bound(v.begin(),v.end(),6);

    cout<<" lower_bound for 6 ar position "
        <<(lower-v.begin()+1)<<'\n';
    cout<<" upper_bound for 6 ar position "
        <<(upper-v.begin()+1)<<'\n';    

    for(auto& it:v)
    {
        cout<<it<<" ";
    }

    //if the number is not present 1 2 4 5
    // lower bound of 3   (>=)  = 4(2)
    // upper bound of 3 is (>=) = 4(2)
    // if two are equal thn the element is not present

}





#include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     vector<int> v = {10, 20, 30, 40, 50, 60, 70, 80, 90};
//     auto it = lower_bound(v.begin(), v.end(), 20);
//     cout << (*it) << endl;
//     cout << (it - v.begin()) << "\n";
//     it = lower_bound(v.begin(), v.end(), 25);
//     cout << (*it) << endl;
//     cout << (it - v.begin()) << "\n";

//     int arr[] = {1, 2, 3, 4, 5, 56, 7};
//     auto it2 = lower_bound(arr, arr + 7, 5);
//     cout << (*it2) << endl;
//     it2 = lower_bound(arr, arr + 6, 34);
//     cout << (*it2) << endl;
// }



#include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     vector<int> v = {10, 20, 30, 40, 50, 60, 70, 80, 90};
//     auto it = upper_bound(v.begin(), v.end(), 50);
//     cout << (*it) << "\n";
//     it = upper_bound(v.begin(), v.end(), 35);
//     cout << (*it) << "\n";
//     cout << (it - v.begin()) << "\n";

//     vector<int> v2 = {10, 20, 20, 20, 20, 20, 30, 40, 50, 60, 70, 80, 90};
//     auto it2 = lower_bound(v2.begin(), v2.end(), 20);
//     auto it3 = upper_bound(v2.begin(), v2.end(), 20);
//     cout << "Same element" << it2 - it3;
//     cout << "\n";
//     // element present or not
//     vector<int> v3 = {10, 20, 30, 40, 50, 60, 70, 80, 90};
//     auto it4 = upper_bound(v.begin(), v.end(), 52);
//     if (it4 != v3.begin() && (*(it4 - 1)) == 52)
//         cout << "Found"
//              << "\n";
//     else
//         cout << "Not Found"
//              << "\n";
//     //find last occurence
// }




